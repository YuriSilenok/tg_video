"""–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–ª–æ–≥–µ—Ä–æ–º"""

import traceback
from datetime import datetime, timedelta
from typing import List

from aiogram import Bot, F, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)

from common import (
    error_handler,
    get_date_time,
    get_id,
    send_message_admins,
    send_new_review_request,
    send_task,
    check_user_role,
)
from filters import IsBloger, WaitVideo, IsBanned
from models import (
    TASK_STATUS,
    Table,
    Task,
    Theme,
    User,
    UserCourse,
    UserRole,
    Video,
)

# pylint: disable=no-member

router = Router()


@error_handler()
@router.message(F.document, IsBloger(), WaitVideo(), ~IsBanned())
async def upload_file(message: Message):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ"""
    await message.answer(
        text="üìπüîúüì®üìπüö´üìÅ.–í–∏–¥–µ–æ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –≤–∏–¥–µ–æ, –∞ –Ω–µ –∫–∞–∫ —Ñ–∞–π–ª"
    )


@error_handler()
async def get_bloger_user_role(bot: Bot, user: User):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –±–ª–æ–≥–µ—Ä–∞"""
    return await check_user_role(
        bot=bot,
        user=user,
        role_name="–ë–ª–æ–≥–µ—Ä",
        error_message=(
            "üï¥üîëüö´üîé–†–æ–ª—å –±–ª–æ–≥–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! "
            "–≠—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞! "
            "C–æ–æ–±—â–∏—Ç–µ –µ–º—É –≤—Å—ë, —á—Ç–æ –í—ã –æ –Ω–µ–º –¥—É–º–∞–µ—Ç–µ. @YuriSilenok"
        ),
        notify_if_no_role=False,
    )


@error_handler()
async def drop_bloger(bot: Bot, user: User):
    """–°–Ω–∏–º–∞–µ—Ç —Ä–æ–ª—å –±–ª–æ–≥–µ—Ä–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞."""
    user_role = await get_bloger_user_role(bot, user)
    if user_role is None:
        await bot.send_message(
            chat_id=user.tg_id, text="‚úîÔ∏èüëÜüõ†üîëüï¥–í–∞–º –Ω–µ –≤—ã–¥–∞–≤–∞–ª–∞—Å—å —Ä–æ–ª—å –±–ª–æ–≥–µ—Ä–∞."
        )
        return

    # –ù–∞–ª–∏—á–∏–µ –≤—ã–¥–∞–Ω–Ω–æ–π —Ç–µ–º—ã
    task = Task.get_or_none(
        implementer=user,
        status=0,
    )

    if task:
        await bot.send_message(
            chat_id=user.tg_id,
            text=f'üëÜüí≠üëÜüíö‚òëüëÖ‚ùì–£ –í–∞—Å –≤—ã–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–∞ —Ç–µ–º—É "{task.theme.title}", '
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è?",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üëå–î–∞",
                            callback_data=f"del_task_yes_{task.id}",
                        )
                    ]
                ]
            ),
        )
        return

    if user_role:
        user_role.delete_instance(recursive=True)

    await bot.send_message(chat_id=user.tg_id, text="–†–æ–ª—å –±–ª–æ–≥–µ—Ä–∞ —Å –í–∞—Å —Å–Ω—è—Ç–∞")

    await send_message_admins(
        bot=bot, text=f"–ë–ª–æ–≥–µ—Ä {user.link} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —Ä–æ–ª–∏."
    )

    await send_task(bot)


@router.message(Command("bloger_off"), IsBloger(), ~IsBanned())
@error_handler()
async def bloger_off(message: Message):
    """–û—Ç–∫–ª—é—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–µ–∂–∏–º–∞ –±–ª–æ–≥–µ—Ä–∞."""
    user = User.get(tg_id=message.from_user.id)
    await drop_bloger(message.bot, user)


@router.callback_query(F.data.startswith("del_task_yes_"), IsBloger(), ~IsBanned())
@error_handler()
async def del_task_yes(query: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –æ—Ç–∫–∞–∑–µ –¥–µ–ª–∞—Ç—å –∑–∞–¥–∞—á—É"""

    await query.message.delete()

    task = Task.get_or_none(id=get_id(query.data))

    if task is None:
        await query.message.answer(text="–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    if task.status != 0:
        await query.message.answer(
            text="–û—Ç –∑–∞–¥–∞—á–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "
            f'"{TASK_STATUS[task.status]}" –Ω–µ–ª—å–∑—è –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è'
        )
        return

    task.status = -1
    task.save()

    user: User = User.get(tg_id=query.from_user.id)
    user.update_bloger_rating()

    await query.message.answer(
        text=f"–ó–∞–¥–∞—á–∞ c–Ω—è—Ç–∞\n\n{user.get_bloger_report()}",
        parse_mode="HTML",
        disable_web_page_preview=True,
    )

    await drop_bloger(query.bot, user)


@router.message(F.video, IsBloger(), WaitVideo(), ~IsBanned())
@error_handler()
async def upload_video(message: Message):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏"""
    user = User.get(tg_id=message.from_user.id)
    tasks = Task.select().where(
        (Task.status == 0) & (Task.implementer == user)
    )

    if tasks.count() == 0:
        await message.answer(
            text="–£ –≤–∞—Å –Ω–µ—Ç –≤—ã–¥–∞–Ω–Ω–æ–π —Ç–µ–º—ã, —è –Ω–µ –º–æ–≥—É –ø—Ä–∏–Ω—è—Ç—å —ç—Ç–æ –≤–∏–¥–µ–æ"
        )
        return

    task = tasks.first()
    Video.create(
        task=task,
        file_id=message.video.file_id,
        duration=message.video.duration,
    )
    task.status = 1
    task.save()

    await message.answer(
        text=(
            "–í–∏–¥–µ–æ –ø—Ä–∏–Ω—è—Ç–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. "
            "–ü–æ–∫–∞ –Ω–æ–≤–∞—è —Ç–µ–º–∞ –Ω–µ –≤—ã–¥–∞–Ω–∞, "
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –±—ã—Ç—å –±–ª–æ–≥–µ—Ä–æ–º –±–µ–∑ —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞."
        )
    )

    await send_message_admins(
        bot=message.bot,
        text=f"""üï¥üì®üìπ<b>–ë–ª–æ–≥–µ—Ä {user.link} –ø—Ä–∏—Å–ª–∞–ª –≤–∏–¥–µ–æ</b>
–¢–µ–º–∞: {task.theme.course.title}|{task.theme.link}""",
    )

    await send_new_review_request(message.bot)


@router.callback_query(F.data.startswith("task_to_extend_"), IsBloger(), ~IsBanned())
@error_handler()
async def to_extend(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –∑–∞–¥–∞—á–∏"""
    task_id = get_id(callback_query.data)
    task: Task = Task.get_by_id(task_id)

    if task.status != 0:
        await callback_query.message.edit_text(
            text="–°—Ä–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–¥–ª—ë–Ω. "
            f"–í–∏–¥–µ–æ –ø–æ —Ç–µ–º–µ {task.theme.link} —É–∂–µ –ø–æ–ª—É—á–µ–Ω–æ.",
            parse_mode="HTML",
            reply_markup=None,
        )
        return
    theme: Theme = task.theme
    hours = int(theme.complexity * 72 / 2)
    hours = max(hours, 24)

    task.due_date += timedelta(hours=hours)
    task.extension = 0
    task.save()

    await callback_query.message.edit_text(
        text=f"–°—Ä–æ–∫ –í–∞—à–µ–π –∑–∞–¥–∞—á–∏ –ø—Ä–æ–¥–ª–µ–Ω –¥–æ {task.due_date}",
        reply_markup=None,
    )

    await send_message_admins(
        bot=callback_query.bot,
        text=f"""<b>–ë–ª–æ–≥–µ—Ä {task.implementer.link} –ø—Ä–æ–¥–ª–∏–ª —Å—Ä–æ–∫</b>
–¢–µ–º–∞: {task.theme.course.title}|{task.theme.link}
–°—Ä–æ–∫: {task.due_date}""",
    )


@error_handler()
async def check_expired_task(bot: Bot):
    """–ü–æ–º–µ—á–∞–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
    dd = get_date_time()
    old_tasks: List[Task] = list(
        Task.select(Task).where((Task.status == 0) & (Task.due_date == dd))
    )
    for task in old_tasks:
        try:
            task.status = -2
            task.save()

            user_role: UserRole = UserRole.get_or_none(
                user=task.implementer, role=IsBloger.role
            )
            if user_role:
                user_role.delete_instance(recursive=True)

            try:
                await bot.send_message(
                    chat_id=task.implementer.tg_id,
                    text="–í—ã –ø—Ä–æ—Å—Ä–æ—á–∏–ª–∏ —Å—Ä–æ–∫ –∑–∞–ø–∏—Å–∏ –≤–∏–¥–µ–æ. "
                    "–¢–µ–º–∞ –∏ –†–æ–ª—å –±–ª–æ–≥–µ—Ä–∞ —Å –í–∞—Å —Å–Ω—è—Ç–∞. "
                    "–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–º—ã –¥–ª—è –≤–∏–¥–µ–æ, "
                    "–ø–æ—à–ª–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /bloger_on",
                )
            except TelegramBadRequest:
                await send_message_admins(bot=bot, text=traceback.format_exc())

            await send_message_admins(
                bot=bot,
                text=f"–¢–µ–º—É {task.theme.link} "
                f"–ø—Ä–æ—Å—Ä–æ—á–∏–ª {task.implementer.link}",
            )

            await send_task(bot)

            new_task = Task.get_or_none(
                theme=task.theme,
                status=0,
            )
            if new_task:
                continue

            query: List[UserRole] = list(
                UserRole.select().where(
                    (UserRole.role_id == IsBloger.role.id)
                    & (
                        ~UserRole.user_id
                        << (
                            User.select(User.id)
                            .join(UserCourse)
                            .where(
                                UserCourse.course_id == task.theme.course_id
                            )
                        )
                    )
                    & (
                        ~UserRole.user_id
                        << (
                            Task.select(Task.implementer_id).where(
                                Task.status.between(0, 1)
                            )
                        )
                    )
                )
            )
            for user_role in query:
                try:
                    await bot.send_message(
                        chat_id=user_role.user.tg_id,
                        text=f"–î–ª—è –∫—É—Ä—Å–∞ {task.theme.course.title} –Ω–µ—Ç "
                        "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–µ–≥–æ –∏ –ø–æ–ª—É—á–∏—Ç–µ "
                        "–∑–∞–¥–∞—á—É –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ",
                    )
                except TelegramBadRequest:
                    await send_message_admins(
                        bot=bot, text=traceback.format_exc()
                    )

        except TelegramBadRequest as ex:
            print(ex, task.implementer.comment)


@error_handler()
async def check_old_task(bot: Bot):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
    now = get_date_time()

    old_tasks: List[Task] = list(
        Task.select(Task).where((Task.status == 0) & (Task.extension == 0))
    )
    for task in old_tasks:

        theme: Theme = task.theme
        hours = int(theme.complexity * 72 / 2)
        hours = max(hours, 24)
        reserve_time: timedelta = timedelta(hours=hours)
        left_time: datetime = task.due_date - now
        if left_time > reserve_time:
            continue

        try:
            sql_query = f"""
select u.user_id
from (
    select ur.user_id
    from userrole as ur
    inner join usercourse as uc on ur.user_id=uc.user_id
    where uc.course_id = {task.theme.course_id}
    and ur.role_id={IsBloger.role.id}
) as u
left join task on task.implementer_id=u.user_id and task.status in (0, 1)
where task.id is NULL;
"""
            users: List[int] = [
                r["user_id"] for r in Table.raw(sql_query).dicts()
            ]
            cont = False

            for user_id in users:
                u: User = User.get_by_id(user_id)
                if u.bloger_rating > task.implementer.bloger_rating:
                    cont = True
                    break

            if cont:
                continue

            await bot.send_message(
                chat_id=task.implementer.tg_id,
                text="–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —ç—Ç–æ–π –∫–Ω–æ–ø–∫–æ–π, —á—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å —Å—Ä–æ–∫ –í–∞—à–µ–π "
                f"–∑–∞–¥–∞—á–∏ –¥–æ {task.due_date + reserve_time} ",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="–ü—Ä–æ–¥–ª–∏—Ç—å –¥–æ "
                                f"{task.due_date + reserve_time}",
                                callback_data=f"task_to_extend_{task.id}",
                            )
                        ]
                    ]
                ),
            )
            task.extension = 1
            task.save()
        except TelegramBadRequest as ex:
            print(ex, task.implementer.comment)


def update_rating_all_blogers():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –≤—Å–µ—Ö –±–ª–æ–≥–µ—Ä–æ–≤ —Å –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏"""
    blogers: List[User] = User.select(User).join(Task).where(Task.status == 0)

    for bloger in blogers:
        bloger.update_bloger_rating()


@error_handler()
async def loop(bot: Bot):
    """–¶–∏–∫–ª –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∏ –±–ª–æ–≥–µ—Ä–æ–≤"""
    update_rating_all_blogers()
    await check_old_task(bot)
    await check_expired_task(bot)
