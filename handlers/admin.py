"""–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""

import csv
from typing import List
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from peewee import JOIN, Case

from filters import IsAdmin
from common import (
    add_reviewer, get_date_time, error_handler, get_id, send_task
)
from models import (
    ReviewRequest, Review, Video, Task, User, Role, UserRole, Course, Theme
)


RR_STATUS = {
    -1: '‚ùå',
    0: '‚ö°',
    1: '‚úÖ',
}


TASK_STATUS = {
    0: 'üìπ',
    1: 'üëÄ',
    2: '‚è±Ô∏è'
}


router = Router()


class UploadVideo(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ—Ç–æ–≤—ã—Ö –≤–∏–¥–µ–æ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É—Ä—Å–∞"""

    # –û–∂–∏–¥–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
    wait_upload = State()


@router.callback_query(F.data.startswith('del_rr_'))
@error_handler()
async def delete_review_request_handler(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ"""

    review_request_id = get_id(callback.data)
    review_request: ReviewRequest = ReviewRequest.get_or_none(
        id=review_request_id
    )

    if not review_request:
        await callback.answer(
            text='–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ –Ω–∞–π–¥–µ–Ω'
        )
        return

    review: Review = review_request.reviews.first()
    if not review:
        await callback.answer(
            text='–ù–µ –Ω–∞–π–¥–µ–Ω –æ—Ç–∑—ã–≤'
        )
        return
    video: Video = review_request.video
    task: Task = video.task
    if task.status != 1:
        task.status = 1
        task.save()
        await callback.message.reply(
            text='–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∑–∞–¥–∞—á–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞',
        )

    await callback.message.reply(
        text='–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –æ—Ç–∑—ã–≤ —É–¥–∞–ª—ë–Ω'
    )

    await callback.bot.send_message(
        chat_id=review_request.reviewer.tg_id,
        text='–í–∞—à –æ—Ç–∑—ã–≤ –∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –≤–∏–¥–µ–æ —É–¥–∞–ª–µ–Ω. '
        '–û–∂–∏–¥–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. '
        '–í–æ–∑–º–æ–∂–Ω–æ –±–æ—Ç –≤—ã–¥–∞—Å—Ç –≤–∏–¥–µ–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ.\n\n'
        f'{review.comment}'
    )

    await callback.bot.send_message(
        chat_id=task.implementer.tg_id,
        text=f'–û—Ç–∑—ã–≤ –ø–æ –≤–∞—à–µ–º—É –≤–∏–¥–µ–æ —É–¥–∞–ª–µ–Ω.\n\n{review.comment}'
    )

    review_request.delete_instance(recursive=True)
    await add_reviewer(callback.bot, video.id)


@router.message(Command('send_task'), IsAdmin())
@error_handler()
async def send_task_handler(message: Message):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –±–ª–æ–≥–µ—Ä—É"""
    await send_task(message.bot)


@router.message(Command('report_reviewers'), IsAdmin())
@error_handler()
async def report_reviewers_handler(message: Message):
    """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–º"""
    old_date = get_date_time(hours=-24*14)
    reviewers: List[User] = (
        User
        .select(User)
        .where(
            (User.reviewer_score > 0) &
            (User.id << (
                ReviewRequest
                .select(ReviewRequest.reviewer)
                .join(Review)
                .where(Review.at_created >= old_date)
            ))
        )
        .group_by(User)
        .order_by(User.reviewer_rating.desc())
    )
    text = 'üëÄüìÑ<b>–û—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä—è—é—â–∏—Ö</b>\n'
    text += '\n'.join([
        f"{u.reviewer_score:05.2f}|{(u.reviewer_rating*100):05.2f}|{u.link}"
        for u in reviewers
    ])

    await message.answer(
        text=text,
        parse_mode='HTML',
        disable_web_page_preview=True,
    )


@router.message(Command('report_blogers'), IsAdmin())
@error_handler()
async def report_blogers_hadler(message: Message):
    """–û—Ç—á–µ—Ç –ø–æ –±–ª–æ–≥–µ—Ä–∞–º"""
    points = ['üìπüìÑ<b>–û—Ç—á–µ—Ç –æ –±–ª–æ–≥–µ—Ä–∞—Ö</b>']
    old_date = get_date_time(hours=-24*14)
    blogers = (
        User
        .select(User)
        .where(
            (User.bloger_score > 0) &
            (User.id << (
                Task
                .select(Task.implementer)
                .join(Video)
                .where(Video.at_created >= old_date)
            ))
        )
        .order_by(User.bloger_rating.desc())
    )
    for bloger in blogers:
        points.append(
            f'{bloger.bloger_score:05.2f}'
            f'|{(bloger.bloger_rating*100):05.2f}'
            f'|{bloger.link}'
        )

    text = '\n'.join(points)
    await message.answer(
        text=text,
        parse_mode='HTML',
        disable_web_page_preview=True,
    )


@router.message(Command('add_role'), IsAdmin())
@error_handler()
async def add_role_handler(message: Message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ä–æ–ª–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    data = message.text.strip().replace('  ', '').split()
    if len(data) != 3:
        await message.answer(
            text=' ‚ùå–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –ö–æ–º–∞–Ω–¥–∞, —Ä–æ–ª—å, —é–∑–µ—Ä–Ω–µ–π–º'
        )
        return
    role_name = data[2]
    role = Role.get_or_none(name=role_name)
    if role is None:
        await message.answer(
            text=f'üì§üôÖ‚Äç‚ôÇüîë–ù–µ—Ç —Ä–æ–ª–∏ {role_name}'
        )
        return

    username = data[1].replace('@', '').strip()
    user = User.get_or_none(username=username)
    if user is None:
        await message.answer(
            text=f'üì§üôÖ‚Äç‚ôÇüë©‚Äçüíª‚èÆüÜî–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —é–∑–µ—Ä–Ω–µ–π–º {username}'
        )
        return
    UserRole.get_or_create(
        user=user,
        role=role
    )
    await message.answer(
        text='üîëüöÆ–†–æ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞'
    )


@router.message(Command('set_comment'), IsAdmin())
@error_handler()
async def set_comment_handler(message: Message):
    """–£–∫–∞–∑–∞—Ç—å –§–ò–û —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    data = message.text.strip().replace('  ', '').split(maxsplit=1)[1]
    data = data.split(maxsplit=1)
    username = data[0].replace('@', '').strip()
    user = User.get_or_none(username=username)
    if user is None:
        await message.answer(
            text='üë©‚Äçüíª‚èÆüëâüÜîüö´üîé–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —é–∑–µ—Ä–Ω–µ–π–º –Ω–µ –Ω–∞–π–¥–µ–Ω'
        )
        return

    user.comment = data[1]
    user.save()

    await message.answer(
        text='üè§‚è∫–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∑–∞–ø–∏—Å–∞–Ω'
    )


@router.message(Command('report_tasks'), IsAdmin())
@error_handler()
async def report_tasks_handler(message: Message):
    """–û—Ç—á–µ—Ç –ø–æ –∑–∞–¥–∞—á–∞–º"""
    tasks: List[Task] = (
        Task
        .select(Task)
        .where(Task.status.between(0, 2))
        .join(
            User,
            on=User.id == Task.implementer
        )
        .order_by(
            Task.status.desc(),
            User.bloger_rating.desc(),
        )
    )

    points = [[], [], []]

    for task in tasks:
        implementer: User = task.implementer
        point = ['|'.join([
            TASK_STATUS[task.status],
            f'{task.theme.complexity:5.3f}',
            task.theme.course.title,
            task.theme.title,
            (
                f'{task.due_date.strftime("%d %H:%M")}'
                if task.status == 0
                else '' if task.status == 1
                else f'{(task.score*100):05.2f}'
            ),
            implementer.link,
            f'{(implementer.bloger_rating*100):05.2f}'
        ])]
        if task.status > 0:
            rrs = (
                task
                .videos
                .first()
                .reviewrequests
                .join(Review, JOIN.LEFT_OUTER)
                .order_by(
                    ReviewRequest.status.desc(),
                    Case(
                        None,
                        [(ReviewRequest.status == 0, ReviewRequest.due_date)],
                        Review.at_created
                    )
                )
            )

            line = ''.join([
                (
                    (
                        f'<a href="https://t.me/{rr.reviewer.username}">'
                        f'{RR_STATUS[rr.status]}</a>'
                        f'{rr.reviews.first().score:3.1f}'
                    )
                    if rr.status == 1 else
                    (
                        f'<a href="https://t.me/{rr.reviewer.username}">'
                        f'{RR_STATUS[rr.status]}</a>'
                        f'{rr.due_date.strftime("%d %H:%M")}'
                    )
                    if rr.status == 0 else
                    (
                        f'<a href="https://t.me/{rr.reviewer.username}">'
                        f'{RR_STATUS[rr.status]}</a>'
                    )
                ) for rr in rrs
            ])
            if line:
                point.append(line)

        points[task.status].append(
            '\n'.join(point)
        )

    end_points = []
    char_count = 0
    for status in (1, 0, 2):
        for point in points[status]:
            if len(point) + char_count < 4096:
                end_points.append(point)
                char_count += len(point)

    await message.answer(
        text='\n\n'.join(end_points),
        parse_mode='HTML',
        disable_web_page_preview=True,
    )


@router.message(F.document.file_name.endswith(".csv"), IsAdmin())
@error_handler()
async def add_course_handler(message: Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫—É—Ä—Å—ã –∏–∑ csv"""
    file = await message.bot.download(message.document.file_id)
    try:
        file.seek(0)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ
        table = csv.reader(file.read().decode("utf-8").splitlines())

        load_videos = []
        for row in table:
            course_title = row[0]
            if not course_title:
                break

            course, _ = Course.get_or_create(
                title=course_title
            )
            theme_title = row[1]
            theme: Theme = Theme.get_or_none(
                course=course,
                title=theme_title,
            )

            theme_url = row[2]
            theme_complexity = float(row[3].replace(',', '.'))
            if not theme:
                theme = Theme.create(
                    course=course,
                    title=theme_title,
                    url=theme_url,
                    complexity=theme_complexity
                )
            else:
                is_save = False

                if theme.complexity != theme_complexity:
                    theme.complexity = theme_complexity
                    is_save = True

                if theme.url != theme_url:
                    theme.url = theme_url
                    is_save = True

                if is_save:
                    theme.save()

            if len(row) > 4 and row[4] != '':
                score = 0.0
                status = 1

                if len(row) > 5 and row[5] != '':
                    score = float(row[5].replace(',', '.'))
                    if score >= 0.8:
                        status = 2
                    else:
                        status = -2

                load_videos.append({
                    'theme': theme.id,
                    'title': theme.title,
                    'implementer': row[4].replace('@', ''),
                    'score': score,
                    'status': status,
                })

        if len(load_videos) == 0:
            await message.answer(
                text='‚ÜóÔ∏è‚ùîüìê–¢–µ–º—ã –∫—É—Ä—Å–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è',
            )
            users: List[User] = User.select()
            for user in users:
                user.update_bloger_score()

        else:
            await state.set_data({
                'load_videos': load_videos
            })
            await state.set_state(UploadVideo.wait_upload)
            await message.answer(
                text=f'üì®üìπ–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –Ω–∞ —Ç–µ–º—É "{load_videos[0]["title"]}"'
            )
    except FileNotFoundError:
        await message.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å.")
    except PermissionError:
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞.")
    except UnicodeDecodeError:
        await message.answer(
            "–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥–∏—Ä–æ–≤–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, utf-8).")
    except csv.Error as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV: {e}")
    except IsADirectoryError:
        await message.answer("–£–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ, –∞ –Ω–µ –∫ —Ñ–∞–π–ª—É.")
    except OSError as e:
        await message.answer(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–º: {e}")
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ CSV: {e}")


@router.message(F.video, IsAdmin(), UploadVideo.wait_upload)
@error_handler()
async def upload_video_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ –∫ –¥–æ–±–∞–≤–ª—è–µ–º–æ–º—É –∫—É—Ä—Å—É"""
    data = await state.get_data()
    load_videos = data['load_videos']
    if len(load_videos) == 0:
        await message.answer(
            text='üåêüìπ‚úîÔ∏èüìÇ–í—Å–µ –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã',
        )
        return

    load_video = load_videos.pop(0)
    implementer: User = User.get(username=load_video['implementer'])
    theme = Theme.get(id=load_video['theme'])
    status = load_video['status']
    score = load_video['score']
    task, _ = Task.get_or_create(
        implementer=implementer,
        theme=theme,
        status=status,
        score=score,
        due_date=get_date_time(0)
    )

    Video.get_or_create(
        task=task,
        file_id=message.video.file_id,
        duration=message.video.duration,
    )

    implementer.update_bloger_score()
    await message.bot.send_message(
        chat_id=implementer.tg_id,
        text=f'üìπüìÇüë®‚Äçüíº–í–∏–¥–µ–æ –Ω–∞ —Ç–µ–º—É {theme.title} –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.'
        f'\n\n{implementer.get_bloger_report()}',
        parse_mode='HTML',
        disable_web_page_preview=True,
    )

    if len(load_videos) == 0:
        await state.clear()
        await message.answer(
            text='üåêüìπ‚úîÔ∏èüìÇ–í—Å–µ –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã'
        )
        return

    await state.set_data({
        'load_videos': load_videos
    })

    await message.answer(
        text=f'üì®üìπ–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –Ω–∞ —Ç–µ–º—É "{load_videos[0]["title"]}"'
    )
