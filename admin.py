"""–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ —Ñ—É–Ω–∫—Ü–∏–π"""

import csv

from typing import List
from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message
from peewee import JOIN, Case

from common import (
    add_reviewer,
    error_handler,
    get_date_time,
    get_id,
    send_task,
)
from filters import IsAdmin
from models import (
    Course,
    Review,
    ReviewRequest,
    Role,
    Task,
    Theme,
    User,
    UserRole,
    Video,
)

# pylint: disable=no-member

router = Router()


class UploadVideo(StatesGroup):  # pylint: disable=too-few-public-methods
    """–ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""

    wait_upload = State()


@router.callback_query(F.data.startswith("del_rr_"))
@error_handler()
async def del_rr(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É (ReviewRequest)."""
    rr_id = get_id(callback.data)
    rr: ReviewRequest = ReviewRequest.get_or_none(id=rr_id)

    if not rr:
        await callback.answer(text="–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    r: Review = rr.reviews.first()
    if not r:
        await callback.answer(text="–ù–µ –Ω–∞–π–¥–µ–Ω –æ—Ç–∑—ã–≤")
        return
    video: Video = rr.video
    task: Task = video.task
    if task.status != 1:
        task.status = 1
        task.save()
        await callback.message.reply(
            text="–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∑–∞–¥–∞—á–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞",
        )

    await callback.message.reply(text="–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –æ—Ç–∑—ã–≤ —É–¥–∞–ª—ë–Ω")

    await callback.bot.send_message(
        chat_id=rr.reviewer.tg_id,
        text="–í–∞—à –æ—Ç–∑—ã–≤ –∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –≤–∏–¥–µ–æ —É–¥–∞–ª–µ–Ω. "
        "–û–∂–∏–¥–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. "
        "–í–æ–∑–º–æ–∂–Ω–æ –±–æ—Ç –≤—ã–¥–∞—Å—Ç –≤–∏–¥–µ–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ.\n\n"
        f"{r.comment}",
    )

    await callback.bot.send_message(
        chat_id=task.implementer.tg_id,
        text=f"–û—Ç–∑—ã–≤ –ø–æ –≤–∞—à–µ–º—É –≤–∏–¥–µ–æ —É–¥–∞–ª–µ–Ω.\n\n{r.comment}",
    )

    rr.delete_instance(recursive=True)
    await add_reviewer(callback.bot, video.id)


@router.message(Command("send_task"), IsAdmin())
@error_handler()
async def st(message: Message):
    """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –≤—ã–¥–∞—á–∏ –∑–∞–¥–∞—á –±–ª–æ–≥–µ—Ä–∞–º."""
    await send_task(message.bot)


@router.message(Command("report_reviewers"), IsAdmin())
@error_handler()
async def report_reviewers(message: Message):
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–º."""
    old_date = get_date_time(hours=-24 * 14)
    reviewers: List[User] = (
        User.select(User)
        .where(
            (User.reviewer_score > 0)
            & (
                User.id
                << (
                    ReviewRequest.select(ReviewRequest.reviewer)
                    .join(Review)
                    .where(Review.at_created >= old_date)
                )
            )
        )
        .group_by(User)
        .order_by(User.reviewer_rating.desc())
    )
    result = "üëÄüìÑ<b>–û—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä—è—é—â–∏—Ö</b>\n"
    result += "\n".join(
        [
            (
                f"{u.reviewer_score:05.2f}"
                f"|{(u.reviewer_rating*100):05.2f}|{u.link}"
            )
            for u in reviewers
        ]
    )

    await message.answer(
        text=result,
        parse_mode="HTML",
        disable_web_page_preview=True,
    )


@router.message(Command("report_blogers"), IsAdmin())
@error_handler()
async def report_blogers(message: Message):
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –±–ª–æ–≥–µ—Ä–∞–º."""
    points = ["üìπüìÑ<b>–û—Ç—á–µ—Ç –æ –±–ª–æ–≥–µ—Ä–∞—Ö</b>"]
    old_date = get_date_time(hours=-24 * 14)
    blogers = (
        User.select(User)
        .where(
            (User.bloger_score > 0)
            & (
                User.id
                << (
                    Task.select(Task.implementer)
                    .join(Video)
                    .where(Video.at_created >= old_date)
                )
            )
        )
        .order_by(User.bloger_rating.desc())
    )
    for bloger in blogers:

        points.append(
            f"{bloger.bloger_score:05.2f}"
            f"|{(bloger.bloger_rating*100):05.2f}"
            f"|{bloger.link}"
        )

    text = "\n".join(points)
    await message.answer(
        text=text,
        parse_mode="HTML",
        disable_web_page_preview=True,
    )


@router.message(Command("add_role"), IsAdmin())
@error_handler()
async def add_role(message: Message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    data = message.text.strip().replace("  ", "").split()
    if len(data) != 3:
        await message.answer(
            text=" ‚ùåüî¢üî¢–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –ö–æ–º–∞–Ω–¥–∞, —Ä–æ–ª—å, —é–∑–µ—Ä–Ω–µ–π–º"
        )
        return
    role_name = data[2]
    role = Role.get_or_none(name=role_name)
    if role is None:
        await message.answer(text=f"üì§üôÖ‚Äç‚ôÇüîë–ù–µ—Ç —Ä–æ–ª–∏ {role_name}")
        return

    username = data[1].replace("@", "").strip()
    user = User.get_or_none(username=username)
    if user is None:
        await message.answer(
            text=f"üì§üôÖ‚Äç‚ôÇüë©‚Äçüíª‚èÆüÜî–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —é–∑–µ—Ä–Ω–µ–π–º {username}"
        )
        return
    UserRole.get_or_create(user=user, role=role)
    await message.answer(text="üîëüöÆ–†–æ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞")


@router.message(Command("set_comment"), IsAdmin())
@error_handler()
async def set_comment(message: Message):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (–§–ò–û) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    data = message.text.strip().replace("  ", "").split(maxsplit=1)[1]
    data = data.split(maxsplit=1)
    username = data[0].replace("@", "").strip()
    user = User.get_or_none(username=username)
    if user is None:
        await message.answer(
            text="üë©‚Äçüíª‚èÆüëâüÜîüö´üîé–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —é–∑–µ—Ä–Ω–µ–π–º –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
        return

    user.comment = data[1]
    user.save()

    await message.answer(text="üè§‚è∫–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∑–∞–ø–∏—Å–∞–Ω")


RR_STATUS = {
    -1: "‚ùå",
    0: "‚ö°",
    1: "‚úÖ",
}

TASK_STATUS = {0: "üìπ", 1: "üëÄ", 2: "‚è±Ô∏è"}


@router.message(Command("report_tasks"), IsAdmin())
@error_handler()
async def report_tasks(message: Message):
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ —Ç–µ–∫—É—â–∏–º –∑–∞–¥–∞—á–∞–º."""
    tasks: List[Task] = (
        Task.select(Task)
        .where(Task.status.between(0, 2))
        .join(User, on=User.id == Task.implementer)
        .order_by(
            Task.status.desc(),
            Task.due_date.asc(),
        )
    )

    points = [[], [], []]

    for task in tasks:
        implementer: User = task.implementer
        point = [
            "|".join(
                [
                    TASK_STATUS[task.status],
                    f"{task.theme.complexity:5.3f}",
                    task.theme.course.title,
                    task.theme.link,
                    # (
                    #     task.due_date if task.status == 0
                    #     else task.videos.first().at_created
                    # ).strftime("%Y-%m-%d %H:%M"),
                    (
                        f'{task.due_date.strftime("%d %H:%M")}'
                        if task.status == 0
                        else (
                            ""
                            if task.status == 1
                            else f"{(task.score*100):05.2f}"
                        )
                    ),
                    implementer.link,
                    f"{(implementer.bloger_rating*100):05.2f}",
                ]
            )
        ]
        if task.status > 0:
            rrs = (
                task.videos.first()
                .reviewrequests.join(Review, JOIN.LEFT_OUTER)
                .order_by(
                    ReviewRequest.status.desc(),
                    Case(
                        None,
                        [(ReviewRequest.status == 0, ReviewRequest.due_date)],
                        Review.at_created,
                    ),
                )
            )

            line = "".join(
                [
                    (
                        (
                            '<a href="https://t.me/'
                            f'{rr.reviewer.username}">'
                            f"{RR_STATUS[rr.status]}</a>"
                            f"{rr.reviews.first().score:3.1f}"
                        )
                        if rr.status == 1
                        else (
                            (
                                '<a href="https://t.me/'
                                f'{rr.reviewer.username}">'
                                f"{RR_STATUS[rr.status]}</a>"
                                f'{rr.due_date.strftime("%d %H:%M")}'
                            )
                            if rr.status == 0
                            else (
                                '<a href="https://t.me/'
                                f'{rr.reviewer.username}">'
                                f"{RR_STATUS[rr.status]}</a>"
                            )
                        )
                    )
                    for rr in rrs
                ]
            )

            if line:
                point.append(line)

        points[task.status].append("\n".join(point))

    end_points = []
    char_count = 0
    for status in (1, 0, 2):
        for point in points[status]:
            if len(point) + char_count < 4096:
                end_points.append(point)
                char_count += len(point)

    await message.answer(
        text="\n\n".join(end_points),
        parse_mode="HTML",
        disable_web_page_preview=True,
    )


@router.message(F.document.file_name.endswith(".csv"), IsAdmin())
@error_handler()
async def add_course(message: Message, state: FSMContext):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—É—Ä—Å—ã –∏ —Ç–µ–º—ã –∏–∑ CSV —Ñ–∞–π–ª–∞."""
    file = await message.bot.download(message.document.file_id)
    try:
        table = _parse_csv_file(file)
        videos_to_upload = _process_theme_rows(table)
        await _send_upload_response(message, state, videos_to_upload)

    except (csv.Error, UnicodeDecodeError, ValueError, IndexError) as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ CSV: {e}")


def _parse_csv_file(file) -> List[List[str]]:
    """–ß–∏—Ç–∞–µ—Ç CSV —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫."""
    file.seek(0)
    return csv.reader(file.read().decode("utf-8").splitlines())


def _process_theme_rows(table: List[List[str]]) -> List[dict]:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ CSV, —Å–æ–∑–¥–∞—ë—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç –∫—É—Ä—Å—ã –∏ —Ç–µ–º—ã."""
    videos_to_upload = []
    for row in table:
        if not row[0]:  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∫—É—Ä—Å–∞ ‚Üí –ø—Ä–æ–ø—É—Å–∫
            break
        course = _get_or_create_course(row[0])
        theme = _update_or_create_theme(course, row[1:4])
        if len(row) > 4 and row[4]:  # –ï—Å—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ç–æ—Ä ‚Üí –¥–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
            video_data = _prepare_video_row(theme, row[4:6])
            videos_to_upload.append(video_data)
    return videos_to_upload


def _get_or_create_course(title: str) -> Course:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫—É—Ä—Å –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π."""
    course, _ = Course.get_or_create(title=title)
    return course


def _update_or_create_theme(course: Course, row: List[str]) -> Theme:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç —Ç–µ–º—É –∫—É—Ä—Å–∞."""
    theme = Theme.get_or_none(course=course, title=row[0])
    if not theme:
        return Theme.create(
            course=course,
            title=row[0],
            url=row[1],
            complexity=float(row[2].replace(",", ".")),
        )
    return _update_theme(theme, row[1], float(row[2].replace(",", ".")))


def _update_theme(theme: Theme, new_url: str, new_complexity: float) -> Theme:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç URL –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Ç–µ–º—ã, –µ—Å–ª–∏ –æ–Ω–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å."""
    if theme.url != new_url or theme.complexity != new_complexity:
        theme.url = new_url
        theme.complexity = new_complexity
        theme.save()
    return theme


def _prepare_video_row(theme: Theme, row: List[str]) -> dict:
    """–ì–æ—Ç–æ–≤–∏—Ç –¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏."""
    score = float(row[1].replace(",", ".")) if len(row) > 1 and row[1] else 0.0
    status = 2 if score >= 0.8 else (-2 if score else 1)
    return {
        "theme": theme.id,
        "title": theme.title,
        "implementer": row[0].replace("@", ""),
        "score": score,
        "status": status,
    }


async def _send_upload_response(
    message: Message,
    state: FSMContext,
    videos_to_upload: List[dict],
) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."""
    if not videos_to_upload:
        await message.answer("‚ÜóÔ∏è‚ùîüìê –¢–µ–º—ã –∫—É—Ä—Å–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –í–∏–¥–µ–æ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è.")
        _update_user_scores()
    else:
        await state.set_data({"load_videos": videos_to_upload})
        await state.set_state(UploadVideo.wait_upload)
        await message.answer(
            f'üì®üìπ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –Ω–∞ —Ç–µ–º—É "{videos_to_upload[0]["title"]}"'
        )


def _update_user_scores() -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–ª—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    for user in User.select():
        user.update_bloger_score()


@router.message(F.video, IsAdmin(), UploadVideo.wait_upload)
@error_handler()
async def upload_video(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –¥–ª—è —Ç–µ–º –∏–∑ CSV."""
    data = await state.get_data()
    load_videos = data["load_videos"]
    if len(load_videos) == 0:
        await message.answer(
            text="üåêüìπ‚úîÔ∏èüìÇ–í—Å–µ –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã",
        )
        return

    load_video = load_videos.pop(0)
    implementer: User = User.get(username=load_video["implementer"])
    theme = Theme.get(id=load_video["theme"])
    status = load_video["status"]
    score = load_video["score"]
    task, _ = Task.get_or_create(
        implementer=implementer,
        theme=theme,
        status=status,
        score=score,
        due_date=get_date_time(0),
    )

    Video.get_or_create(
        task=task,
        file_id=message.video.file_id,
        duration=message.video.duration,
    )

    implementer.update_bloger_score()
    await message.bot.send_message(
        chat_id=implementer.tg_id,
        text=(
            f"üìπüìÇüë®‚Äçüíº–í–∏–¥–µ–æ –Ω–∞ —Ç–µ–º—É {theme.title} –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            f"\n\n{implementer.get_bloger_report()}"
        ),
        parse_mode="HTML",
        disable_web_page_preview=True,
    )

    if len(load_videos) == 0:
        await state.clear()
        await message.answer(text="üåêüìπ‚úîÔ∏èüìÇ–í—Å–µ –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        return

    await state.set_data({"load_videos": load_videos})

    await message.answer(
        text=f'üì®üìπ–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –Ω–∞ —Ç–µ–º—É "{load_videos[0]["title"]}"'
    )


@router.message(Command("ban_user"), IsAdmin())
@error_handler()
async def ban_user(message: Message):
    """–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    data = message.text.strip().replace("  ", " ").split()
    if len(data) != 2:
        await message.answer(
            text="‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /ban_user @username"
        )
        return

    username = data[1].replace("@", "").strip()
    user = User.get_or_none(username=username)
    if user is None:
        await message.answer(
            text=f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å username {username} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
        return

    admin_role = Role.get_or_none(name="–ê–¥–º–∏–Ω")
    if admin_role:
        is_admin = UserRole.get_or_none(user=user, role=admin_role)
        if is_admin:
            await message.answer(
                text="‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            )
            return

    if user.is_banned:
        await message.answer(
            text=f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        )
        return

    user.is_banned = True
    user.save()
    
    bloger_role = Role.get_or_none(name="–ë–ª–æ–≥–µ—Ä")
    reviewer_role = Role.get_or_none(name="–ü—Ä–æ–≤–µ—Ä—è—é—â–∏–π")
    
    if bloger_role:
        bloger_user_role = UserRole.get_or_none(user=user, role=bloger_role)
        if bloger_user_role:
            bloger_user_role.delete_instance()
    
    if reviewer_role:
        reviewer_user_role = UserRole.get_or_none(user=user, role=reviewer_role)
        if reviewer_user_role:
            reviewer_user_role.delete_instance()

    active_tasks = Task.select().where(
        (Task.implementer == user) & (Task.status.in_([0, 1]))
    )
    for task in active_tasks:
        task.status = -1
        task.save()

    active_reviews = ReviewRequest.select().where(
        (ReviewRequest.reviewer == user) & (ReviewRequest.status == 0)
    )
    for review_request in active_reviews:
        review_request.status = -1
        review_request.save()

    await message.answer(
        text=f"üî® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} ({user.comment or '–ë–µ–∑ –§–ò–û'}) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
    )

    try:
        await message.bot.send_message(
            chat_id=user.tg_id,
            text="‚ùå –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
            "–í—Å–µ –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã. "
            "–î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
    except Exception:
        pass


@router.message(Command("unban_user"), IsAdmin())
@error_handler()
async def unban_user(message: Message):
    """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    data = message.text.strip().replace("  ", " ").split()
    if len(data) != 2:
        await message.answer(
            text="‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /unban_user @username"
        )
        return

    username = data[1].replace("@", "").strip()
    user = User.get_or_none(username=username)
    if user is None:
        await message.answer(
            text=f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å username {username} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
        return

    if not user.is_banned:
        await message.answer(
            text=f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        )
        return

    user.is_banned = False
    user.save()

    await message.answer(
        text=f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} ({user.comment or '–ë–µ–∑ –§–ò–û'}) —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
    )

    try:
        await message.bot.send_message(
            chat_id=user.tg_id,
            text="‚úÖ –í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞."
        )
    except Exception:
        pass